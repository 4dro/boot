     1                                  CPU 286
     2                                  BITS 16
     3                                  
     4                                  segment	'code'
     5                                  
     6                                  OUR_ADDRESS			equ		7C00h
     7                                  ROOT_LOAD_ADDR		equ		OUR_ADDRESS + 0A00h
     8                                  
     9                                  SEG_ADDRESS_TO_LOAD	equ		2000h
    10                                  
    11                                  var_data_start		equ	-0Ah
    12                                  cached_fat_sector	equ	-6
    13                                  var_reserved		equ	-4
    14                                  
    15 00000000 EB3C                                jmp    short actual_start
    16 00000002 0F                      cluster_mask        db  0Fh
    17                                  ; --------------- Bios Parameters Block ------------------------------------
    18 00000003 6162636465666768        os_name				db 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'
    19 0000000B 0002                    sector_size			dw 200h
    20 0000000D 01                      sec_per_cluster		db 1
    21 0000000E 0100                    reserved_sectors	dw 1
    22 00000010 02                      num_of_fats			db 2
    23 00000011 E000                    root_file_entries	dw 0E0h
    24 00000013 400B                    total_sect_low		dw 0B40h
    25 00000015 F0                      media_type			db 0F0h
    26 00000016 0900                    fat_size			dw 9
    27 00000018 1200                    sec_per_track		dw 12h
    28 0000001A 0200                    num_heads			dw 2
    29 0000001C 00000000                hidden_sectors		dd 0
    30 00000020 00000000                total_sect_large	dd 0
    31 00000024 00                      drive				db 0
    32 00000025 00                      not_used			db 0
    33 00000026 29                      nt_signature		db 29h
    34 00000027 78563412                volume_serial		dd 12345678h
    35 0000002B 202020202020202020-     disk_label			db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '
    35 00000034 2020               
    36 00000036 4641543132202020        fs_name				db 'F', 'A', 'T', '1', '2', ' ', ' ', ' '
    37                                  
    38                                  ; ------------------------------------------------------------------------
    39                                  
    40                                  actual_start:
    41 0000003E 31C0                                xor		ax, ax
    42                                  
    43 00000040 8ED0                                mov		ss, ax
    44 00000042 BC007C                              mov		sp, OUR_ADDRESS
    45 00000045 89E5                                mov		bp, sp
    46 00000047 8EC0                                mov		es, ax
    47 00000049 8ED8                                mov		ds, ax
    48                                  
    49 0000004B B441                                mov		ah, 41h				; DISK - check ext read	support
    50 0000004D BBAA55                              mov		bx, 55AAh			; signature
    51 00000050 8856[24]                            mov		bp[byte drive], dl	; rely on drive number sent in dl
    52 00000053 CD13                                int		13h
    53 00000055 720A                                jc		short no_ext_bios
    54 00000057 80E101                              and		cl, 1
    55 0000005A 7405                                jz		short no_ext_bios
    56 0000005C C606[9A7D]42                        mov		byte [OUR_ADDRESS + bios_read_command + 2], 42h
    57                                  
    58                                  no_ext_bios:
    59 00000061 FC                                  cld
    60                                  ; calculate data start secotor
    61 00000062 31C9                                xor		cx, cx
    62 00000064 8A46[10]                            mov		al, byte bp[byte num_of_fats]
    63 00000067 98                                  cbw
    64 00000068 F766[16]                            mul		word bp[byte fat_size]		; dx:ax - fats size in sectors
    65 0000006B 93                                  xchg	ax, bx
    66 0000006C 87D6                                xchg	dx, si						; si:bx	-> fat size in sectors
    67 0000006E 8B46[0E]                            mov		ax, word bp[byte reserved_sectors]
    68 00000071 99                                  cwd
    69 00000072 0346[1C]                            add		ax, word bp[byte hidden_sectors]
    70 00000075 1356[1E]                            adc		dx, word bp[byte hidden_sectors+2]
    71 00000078 52                                  push	dx		; put into var_reserved
    72 00000079 50                                  push	ax
    73 0000007A 01D8                                add		ax, bx		; + fat size
    74 0000007C 11F2                                adc		dx, si
    75 0000007E 8B76[11]                            mov		si, word bp[byte root_file_entries]
    76 00000081 50                                  push	ax		; init cached_fat_sector with	root start sector (invalid)
    77 00000082 52                                  push	dx		; put root start (dx:ax) into var_datastart
    78 00000083 50                                  push	ax
    79 00000084 60                                  pusha
    80 00000085 96                                  xchg	ax, si
    81 00000086 99                                  cwd
    82 00000087 C1E005                              shl		ax, 5	; multiply by file entry size (32)
    83 0000008A 8B5E[0B]                            mov		bx, word bp[byte sector_size]
    84 0000008D 01D8                                add		ax, bx
    85 0000008F 48                                  dec		ax
    86 00000090 F7F3                                div		bx		; calculate number of sectors needed for root folder (x + sector_size - 1) / sector size
    87 00000092 0146F6                              add		word bp[byte var_data_start], ax
    88 00000095 114EF8                              adc		word bp[byte var_data_start + 2],	cx
    89                                  
    90                                  ; calculate total number	of data	clusters
    91 00000098 8B46[13]                            mov		ax, word bp[byte total_sect_low]
    92 0000009B 0B46[20]                            or		ax, word bp[byte total_sect_large]
    93 0000009E 8B56[22]                            mov		dx, word bp[byte total_sect_large + 2]
    94 000000A1 2B46F6                              sub		ax, word bp[byte var_data_start]
    95 000000A4 1B56F8                              sbb		dx, word bp[byte var_data_start + 2]
    96 000000A7 0346[1C]                            add		ax, word bp[byte hidden_sectors]
    97 000000AA 1356[1E]                            adc		dx, word bp[byte hidden_sectors + 2]
    98 000000AD 8A4E[0D]                            mov		cl, byte bp[byte sec_per_cluster]
    99 000000B0 F7F1                                div		cx		; get number of	clusters
   100                                  
   101                                  ; fat type is defined by number of clusters
   102 000000B2 3DF50F                              cmp		ax, 0FF5h
   103 000000B5 7204                                jb		short its_fat12
   104 000000B7 C646[02]FF                          mov     byte bp[byte cluster_mask], 0FFh
   105                                  
   106                                  its_fat12:
   107 000000BB 61                                  popa		; si - number of root entries
   108                                                          ; dx:ax	- root start sector
   109                                                          ; cx - 0
   110                                  
   111                                  read_root:
   112 000000BC BB0086                              mov		bx, ROOT_LOAD_ADDR
   113 000000BF 89DF                                mov		di, bx
   114 000000C1 E8AE00                              call	read_one_sector
   115                                  
   116                                  next_file:
   117 000000C4 380D                                cmp		[di], cl
   118 000000C6 7467                                je		short file_not_found
   119 000000C8 60                                  pusha
   120 000000C9 B10B                                mov		cl, 11
   121 000000CB BE[637D]                            mov		si, loader_file_name + OUR_ADDRESS
   122 000000CE F3A6                                repe	 cmpsb
   123 000000D0 61                                  popa
   124 000000D1 740C                                je		short loader_found
   125 000000D3 4E                                  dec		si
   126 000000D4 7459                                jz		short file_not_found
   127 000000D6 83C720                              add		di, 20h
   128 000000D9 39DF                                cmp		di, bx
   129 000000DB 72E7                                jb		short next_file
   130 000000DD EBDD                                jmp		short read_root
   131                                  ; -------------------------------------------------------------------
   132                                  
   133                                  loader_found:
   134 000000DF 8B451A                              mov		ax, [di+1Ah]	; fist cluster start in	file record
   135 000000E2 BF0020                              mov		di, SEG_ADDRESS_TO_LOAD	; start	address	(segment) to load file to
   136 000000E5 57                                  push	di
   137 000000E6 51                                  push	cx
   138                                  
   139                                  read_loader_cluster:
   140 000000E7 50                                  push	ax
   141 000000E8 48                                  dec		ax
   142 000000E9 48                                  dec		ax
   143 000000EA 8A4E[0D]                            mov		cl, byte bp[byte sec_per_cluster]
   144 000000ED F7E1                                mul		cx
   145 000000EF 0346F6                              add		ax, word bp[byte var_data_start]
   146 000000F2 1356F8                              adc		dx, word bp[byte var_data_start + 2]
   147 000000F5 06                                  push	es
   148 000000F6 8EC7                                mov		es, di
   149 000000F8 31DB                                xor		bx, bx
   150 000000FA E87600                              call	read_sectors
   151 000000FD 07                                  pop		es
   152 000000FE C1EB04                              shr		bx, 4
   153 00000101 01DF                                add		di, bx
   154 00000103 58                                  pop		ax          ; ax - cluster
   155 00000104 31D2                                xor		dx, dx
   156                                  
   157                                  ; --------- find next cluster ----------------------------------------------
   158                                              ; calculate FAT record offset on FAT12
   159 00000106 89C3                                mov		bx, ax
   160 00000108 807E[02]FF                          cmp     byte bp [byte cluster_mask], 0FFh
   161 0000010C 7402                                je      offset_fat16    ; c flag = 0 for FAT16 since operands are equal
   162 0000010E D1EB                                shr		bx, 1       ; for FAT12, bx = 0,5 ax
   163                                  offset_fat16:
   164 00000110 9C                                  pushf               ; c flag indicates on FAT12 cluster is XXX0h - need shift
   165 00000111 01D8                                add     ax, bx		; ax = offset in FAT (either ax * 1.5 or ax * 2)
   166 00000113 11CA                                adc     dx, cx      ; fat16 offset could overflow - 0FFFFh * 2
   167 00000115 E89800                              call    next_cluster
   168 00000118 9D                                  popf
   169 00000119 7303                                jnc     short lower_half_byte
   170 0000011B C1E804                              shr     ax, 4       ; on fat12 shift 0XXX0h -> 00XXXh
   171                                  lower_half_byte:
   172 0000011E B3FF                                mov     bl, 0FFh
   173 00000120 8A7E[02]                            mov     bh, bp [byte cluster_mask]  ; bx 0FFFFh on FAT16, 0FFFh on FAT12
   174 00000123 21D8                                and     ax, bx
   175                                              ; ax - next cluster
   176 00000125 B3F8                                mov     bl, 0F8h    ; 0FFF8h or 0FF8h
   177 00000127 39D8                                cmp     ax, bx      ; is last cluster?
   178 00000129 72BC                                jb      short read_loader_cluster
   179                                  
   180                                  ; ------------- File is loaded, execute it --------------------------------------------
   181 0000012B 8A56[24]                            mov     dl, bp[byte drive]
   182 0000012E CB                                  retf            ; jump to 2000:0 - start of the	loader
   183                                  
   184                                  ; -------------------------------------------------------------------------------
   185                                  
   186                                  file_not_found:
   187 0000012F B0[59]                              mov		al, missing_file_msg - 100h
   188                                  
   189                                  message_exit:
   190 00000131 B47D                                mov		ah, 7Dh			; our address + 100h high byte
   191 00000133 96                                  xchg	ax, si
   192                                  
   193                                  print_char:
   194 00000134 AC                                  lodsb
   195 00000135 98                                  cbw
   196 00000136 40                                  inc		ax
   197 00000137 780C                                js		short print_replace_disk
   198 00000139 48                                  dec		ax
   199 0000013A 7419                                jz		short wait_exit
   200 0000013C B40E                                mov		ah, 0Eh		; video	- display char and move	cursor;	al-char
   201 0000013E BB0700                              mov		bx, 7		; color	7, page	0
   202 00000141 CD10                                int		10h
   203 00000143 EBEF                                jmp		short print_char
   204                                  ; --------------------------------------------------------------------------------
   205                                  
   206                                  print_replace_disk:
   207 00000145 B0[DD]                              mov		al, replace_disk_msg - 100h ; "Replace the disk"
   208 00000147 EBE8                                jmp		short message_exit
   209                                  ; ---------------------------------------------------------------------------
   210 00000149 0D0A4469736B206572-     disk_error_msg		db 0Dh,	0Ah, 'Disk error'
   210 00000152 726F72             
   211                                  ; ---------------------------------------------------------------------------
   212                                  
   213                                  wait_exit:
   214                                              ; ax is always 0 here
   215 00000155 CD16                                int     16h		; ah = 0, wait for a key press
   216 00000157 CD19                                int     19h		; reboot the computer
   217                                  
   218                                  ; --------------------------------------------------------------------------
   219 00000159 0D0A4D697373696E67-     missing_file_msg	 db 0Dh, 0Ah, 'Missing '
   219 00000162 20                 
   220                                  
   221 00000163 4F534C4F4144455220-     loader_file_name	 db 'OSLOADER', 3 dup(' ')
   221 0000016C 2020               
   222                                  
   223                                  ; ---------------------------------------------------------------------------
   224                                  
   225                                  disk_error_exit:
   226 0000016E B0[49]                              mov		al, disk_error_msg - 100h
   227 00000170 EBBF                                jmp		short message_exit
   228                                  
   229                                  ; -------------- Read one sector ------------------------------------
   230                                              ; expects cx to be 0
   231                                              ; rest parameters are the same as for read_sectors
   232                                  read_one_sector:
   233                                  
   234 00000172 41                                  inc		cx
   235                                  ; -------------- Read sectors procedure ------------------------------------
   236                                              ; es:bx	-> buffer
   237                                              ; dx:ax	- address of the sector
   238                                              ; cx - number of sectors to read
   239                                          ; on return:
   240                                              ; cx = 0
   241                                              ; dx:ax - next sector address
   242                                              ; es:bx -> adjusted to point to next address
   243                                              ; other registers are unchanged
   244                                  read_sectors:
   245                                  
   246 00000173 60                                  pusha           ; save registers
   247                                  
   248                                  ; DAP block end
   249 00000174 1E                                  push    ds		; 0
   250 00000175 1E                                  push    ds
   251 00000176 52                                  push    dx
   252 00000177 50                                  push    ax		; 8byte	absolute number	of sector
   253 00000178 06                                  push    es
   254 00000179 53                                  push    bx		; address to read to
   255 0000017A 6A01                                push    1		; num sectors
   256 0000017C 6A10                                push    10h		; DAP block size
   257                                  ; DAP block start
   258                                  
   259                                  ; convert abs address to cylinders, heads and tracks for ah=2 bios API
   260 0000017E 91                                  xchg    ax, cx		; save lower address to	cx
   261 0000017F 8B76[18]                            mov     si, word bp[byte sec_per_track]
   262 00000182 92                                  xchg    ax, dx		; higher -> ax
   263 00000183 99                                  cwd
   264                                              ; dx:ax = 0:high address
   265 00000184 F7F6                                div     si		    ; higher address / sectors per track
   266                                              ; dx = high address % sec_per_track
   267 00000186 91                                  xchg    ax, cx		; cx = high address / sec_per_track
   268                                              ; ax = low address
   269 00000187 F7F6                                div     si		    ; lower	address	/ sectors per track
   270 00000189 87CA                                xchg    cx, dx		; cx - remainder, dx - higher result
   271                                              ; dx:ax = abs address / sec_per_track
   272                                              ; cx = abs address % sec_per_track
   273 0000018B F776[1A]                            div     word bp [byte num_heads]
   274                                              ; ax - cylinder, cx - sector, dx - head
   275 0000018E 88D6                                mov     dh, dl		; dh - head (remainder of division)
   276                                  
   277 00000190 86C4                                xchg    al, ah      ; conver cylinder into bios format
   278 00000192 C0E006                              shl     al, 6       ; bits 0-7 go to CH, 8-9 to bits 6-7 of CL
   279 00000195 41                                  inc     cx          ; inc sector number because it starts with 1
   280 00000196 09C1                                or      cx, ax
   281                                  
   282                                  bios_read_command:
   283                                              ; the following command would be replaced to "mov ax, 4201h" if extended
   284                                              ; bios read is supported
   285 00000198 B80102                              mov     ax, 201h
   286 0000019B 89E6                                mov     si, sp		; pointer to DAP packet	in stack
   287 0000019D 8A56[24]                            mov     dl, bp[byte drive]
   288                                  
   289                                      		; DISK - READ SECTORS INTO MEMORY
   290                                              ; AL = number of sectors to read, CH = track, CL = sector
   291                                              ; DH = head, DL	= drive, ES:BX -> buffer to fill
   292                                              ; Return: CF set on error, AH =	status,	AL = number of sectors read
   293 000001A0 CD13                                int     13h
   294                                  
   295 000001A2 61                                  popa    ; release DAP block from stack (same as add sp, 10h)
   296                                  
   297 000001A3 61                                  popa    ; restore all registers
   298 000001A4 72C8                                jc      short disk_error_exit
   299                                  
   300 000001A6 40                                  inc     ax		; increase read	address
   301 000001A7 7501                                jnz     short no_addr_overflow
   302 000001A9 42                                  inc     dx
   303                                  no_addr_overflow:
   304                                  
   305 000001AA 035E[0B]                            add     bx, word bp [byte sector_size]
   306 000001AD E2C4                                loop    read_sectors
   307 000001AF C3                                  retn
   308                                  ; ----------------------------------------------------------------------------
   309                                  
   310                                  ; ----------------- Read next cluster record from FAT ------------------------------
   311                                  next_cluster:
   312                                              ; cx = 0
   313                                              ; dx:ax - byte offset of the cluster in FAT
   314                                          ; returns
   315                                              ; ax = a word from the specified offset in FAT table
   316                                              ; cx = 0
   317                                              ; bx, dx, si are changed
   318                                  
   319 000001B0 BB007E                              mov		bx, OUR_ADDRESS + 200h
   320 000001B3 F776[0B]                            div		word bp [byte sector_size]
   321 000001B6 8D7701                              lea		si, [bx+1]
   322 000001B9 01D6                                add		si, dx
   323 000001BB 99                                  cwd
   324 000001BC 0346FC                              add		ax, word bp [byte var_reserved]
   325 000001BF 1356FE                              adc		dx, word bp [byte var_reserved + 2]
   326 000001C2 3B46FA                              cmp		ax, bp [byte cached_fat_sector]
   327 000001C5 740D                                jz		short already_read
   328 000001C7 8946FA                              mov		bp [byte cached_fat_sector], ax
   329                                  
   330                                  read_one_more:
   331 000001CA E8A5FF                              call	read_one_sector
   332                                  
   333                                  take_fat_record:
   334 000001CD 39DE                                cmp     si, bx
   335 000001CF 73F9                                jae     short read_one_more
   336 000001D1 4E                                  dec		si
   337 000001D2 AD                                  lodsw			; read next cluster word
   338 000001D3 C3                                  retn
   339                                  ; ----------------------------------------------------------------------------
   340                                  
   341                                  already_read:
   342 000001D4 035E[0B]                            add		bx, word bp[byte sector_size]
   343 000001D7 40                                  inc		ax
   344 000001D8 75F3                                jnz		short take_fat_record
   345 000001DA 42                                  inc		dx
   346 000001DB EBF0                                jmp		short take_fat_record
   347                                  ; ---------------------------------------------------------------------------
   348 000001DD 0D0A5265706C616365-     replace_disk_msg	db 0Dh,0Ah,'Replace the disk',0
   348 000001E6 20746865206469736B-
   348 000001EF 00                 
   349 000001F0 44524F4F5059313233-             db 'DROOPY1234567', 0
   349 000001F9 3435363700         
   350 000001FE 55AA                            db 55h,	0AAh
