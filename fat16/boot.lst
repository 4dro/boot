     1                                  CPU 286
     2                                  BITS 16
     3                                  
     4                                  segment	'code'
     5                                  
     6                                  OUR_ADDRESS         equ     7C00h
     7                                  ROOT_LOAD_ADDR      equ     OUR_ADDRESS + 0A00h
     8                                  FAT_CACHE_ADDR      equ     OUR_ADDRESS + 200h
     9                                  
    10                                  SEG_ADDRESS_TO_LOAD equ     2000h
    11                                  
    12                                  data_start          equ     -0Ah
    13                                  cached_fat_sector   equ     -6
    14                                  fat_start           equ     -4
    15                                  
    16 00000000 EB3C                                jmp    short actual_start
    17 00000002 0F                      cluster_mask        db  0Fh
    18                                  ; --------------- Bios Parameters Block ------------------------------------
    19 00000003 6162636465666768        os_name				db 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'
    20 0000000B 0002                    sector_size			dw 200h
    21 0000000D 01                      sec_per_cluster		db 1
    22 0000000E 0100                    reserved_sectors	dw 1
    23 00000010 02                      num_of_fats			db 2
    24 00000011 E000                    root_file_entries	dw 0E0h
    25 00000013 400B                    total_sect_low		dw 0B40h
    26 00000015 F0                      media_type			db 0F0h
    27 00000016 0900                    fat_size			dw 9
    28 00000018 1200                    sec_per_track		dw 12h
    29 0000001A 0200                    num_heads			dw 2
    30 0000001C 00000000                hidden_sectors		dd 0
    31 00000020 00000000                total_sect_large	dd 0
    32 00000024 00                      drive				db 0
    33                                  actually_read:
    34 00000025 00                      not_used			db 0
    35 00000026 29                      nt_signature		db 29h
    36 00000027 78563412                volume_serial		dd 12345678h
    37 0000002B 202020202020202020-     disk_label			db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '
    37 00000034 2020               
    38 00000036 4641543132202020        fs_name				db 'F', 'A', 'T', '1', '2', ' ', ' ', ' '
    39                                  
    40                                  ; ------------------------------------------------------------------------
    41                                  
    42                                  actual_start:
    43 0000003E 31C0                                xor     ax, ax
    44                                  
    45 00000040 8ED0                                mov     ss, ax
    46 00000042 BC007C                              mov     sp, OUR_ADDRESS
    47 00000045 89E5                                mov     bp, sp
    48 00000047 8EC0                                mov     es, ax
    49 00000049 8ED8                                mov     ds, ax
    50                                  
    51 0000004B B441                                mov     ah, 41h				; DISK - check ext read	support
    52 0000004D BBAA55                              mov     bx, 55AAh			; signature
    53 00000050 8856[24]                            mov     bp[byte drive], dl	; rely on drive number sent in dl
    54 00000053 CD13                                int     13h
    55 00000055 720B                                jc      short no_ext_bios
    56 00000057 80E101                              and     cl, 1
    57 0000005A 7406                                jz      short no_ext_bios
    58 0000005C C706[C97D]42EB                      mov     word [OUR_ADDRESS + to_be_changed + 1], 0EB42h  ; change command to 42h, and unconditional jump
    59                                  
    60                                  no_ext_bios:
    61 00000062 FC                                  cld
    62                                  ; calculate data start secotor
    63 00000063 31C9                                xor     cx, cx
    64 00000065 8A46[10]                            mov     al, byte bp[byte num_of_fats]
    65 00000068 98                                  cbw
    66 00000069 F766[16]                            mul     word bp[byte fat_size]		; dx:ax - fats size in sectors
    67 0000006C 93                                  xchg    ax, bx
    68 0000006D 89D6                                mov     si, dx                      ; si:bx -> fat size in sectors
    69 0000006F 8B46[0E]                            mov     ax, word bp[byte reserved_sectors]
    70 00000072 99                                  cwd
    71 00000073 0346[1C]                            add     ax, word bp[byte hidden_sectors]
    72 00000076 1356[1E]                            adc     dx, word bp[byte hidden_sectors+2]
    73 00000079 52                                  push    dx              ; put into fat_start
    74 0000007A 50                                  push    ax
    75 0000007B 01D8                                add     ax, bx          ; + fat size
    76 0000007D 11F2                                adc     dx, si
    77 0000007F 8B76[11]                            mov     si, word bp[byte root_file_entries]
    78 00000082 50                                  push    ax      ; init cached_fat_sector with	root start sector (invalid)
    79 00000083 52                                  push    dx
    80 00000084 50                                  push    ax      ; put root start (dx:ax) into var_datastart
    81 00000085 60                                  pusha
    82 00000086 96                                  xchg    ax, si
    83 00000087 99                                  cwd
    84 00000088 C1E005                              shl     ax, 5	; multiply by file entry size (32)
    85 0000008B 8B5E[0B]                            mov     bx, word bp[byte sector_size]
    86 0000008E 01D8                                add     ax, bx
    87 00000090 48                                  dec     ax
    88 00000091 F7F3                                div     bx		; calculate number of sectors needed for root folder (x + sector_size - 1) / sector size
    89 00000093 0146F6                              add     word bp[byte data_start], ax        ; add root size to data_start
    90 00000096 114EF8                              adc     word bp[byte data_start + 2], cx
    91                                  
    92                                  ; calculate total number	of data	clusters
    93 00000099 8B46[13]                            mov     ax, word bp[byte total_sect_low]
    94 0000009C 0B46[20]                            or      ax, word bp[byte total_sect_large]
    95 0000009F 8B56[22]                            mov     dx, word bp[byte total_sect_large + 2]
    96 000000A2 2B46F6                              sub     ax, word bp[byte data_start]
    97 000000A5 1B56F8                              sbb     dx, word bp[byte data_start + 2]
    98 000000A8 0346[1C]                            add     ax, word bp[byte hidden_sectors]
    99 000000AB 1356[1E]                            adc     dx, word bp[byte hidden_sectors + 2]
   100 000000AE 8A4E[0D]                            mov     cl, byte bp[byte sec_per_cluster]
   101 000000B1 F7F1                                div     cx		; get number of	clusters
   102                                  
   103                                  ; fat type is defined by number of clusters
   104 000000B3 3DF50F                              cmp     ax, 0FF5h
   105 000000B6 7204                                jb      short its_fat12
   106 000000B8 C646[02]FF                          mov     byte bp[byte cluster_mask], 0FFh
   107                                  
   108                                  its_fat12:
   109 000000BC 61                                  popa        ; si - number of root entries
   110                                                          ; dx:ax	- root start sector
   111                                                          ; cx - 0
   112                                  
   113                                  read_root:
   114 000000BD BB0086                              mov     bx, ROOT_LOAD_ADDR
   115 000000C0 89DF                                mov     di, bx
   116 000000C2 E8D700                              call    read_one_sector
   117                                  
   118                                  next_file:
   119 000000C5 380D                                cmp     [di], cl
   120 000000C7 7417                                je      short file_not_found
   121 000000C9 60                                  pusha
   122 000000CA B10B                                mov     cl, 11
   123 000000CC BE[8D7D]                            mov     si, loader_file_name + OUR_ADDRESS
   124 000000CF F3A6                                repe    cmpsb
   125 000000D1 61                                  popa
   126 000000D2 7410                                je      short loader_found
   127 000000D4 4E                                  dec     si
   128 000000D5 7409                                jz      short file_not_found
   129 000000D7 83C720                              add     di, 20h         ; file entry size in directory
   130 000000DA 39DF                                cmp     di, bx
   131 000000DC 72E7                                jb      short next_file
   132 000000DE EBDD                                jmp     short read_root
   133                                  ; -------------------------------------------------------------------
   134                                  file_not_found:
   135 000000E0 B0[85]                              mov     al, missing_file_msg - 100h
   136 000000E2 EB7D                                jmp     short message_exit
   137                                  
   138                                  loader_found:
   139 000000E4 8B451A                              mov     ax, [di + 1Ah]          ; fist cluster of the file
   140 000000E7 BF0020                              mov     di, SEG_ADDRESS_TO_LOAD ; start address (segment) to load file to
   141                                  
   142 000000EA 57                                  push    di      ; save the address to jump to
   143 000000EB 51                                  push    cx      ; later we will return far to SEG_ADDRESS_TO_LOAD:0
   144                                  
   145                                  read_loader_cluster:
   146 000000EC 50                                  push	ax
   147 000000ED 48                                  dec		ax
   148 000000EE 48                                  dec		ax
   149 000000EF 8A4E[0D]                            mov		cl, byte bp[byte sec_per_cluster]
   150 000000F2 F7E1                                mul		cx
   151 000000F4 0346F6                              add		ax, word bp[byte data_start]
   152 000000F7 1356F8                              adc		dx, word bp[byte data_start + 2]
   153 000000FA 06                                  push	es
   154 000000FB 8EC7                                mov		es, di
   155 000000FD 31DB                                xor		bx, bx
   156 000000FF E89B00                              call	read_sectors
   157 00000102 07                                  pop		es
   158 00000103 C1EB04                              shr		bx, 4
   159 00000106 01DF                                add		di, bx
   160 00000108 58                                  pop		ax          ; ax - cluster
   161 00000109 31D2                                xor		dx, dx
   162                                  
   163                                  ; --------- find next cluster ----------------------------------------------
   164                                              ; calculate FAT record offset on FAT12
   165 0000010B 89C3                                mov     bx, ax
   166 0000010D 807E[02]FF                          cmp     byte bp [byte cluster_mask], 0FFh
   167 00000111 7402                                je      short offset_fat16      ; c flag = 0 for FAT16 since operands are equal
   168 00000113 D1EB                                shr     bx, 1                   ; for FAT12, bx = 0,5 * ax
   169                                  offset_fat16:
   170 00000115 9C                                  pushf               ; c flag indicates on FAT12 cluster is XXX0h - need shift
   171 00000116 01D8                                add     ax, bx		; ax = offset in FAT (either ax * 1.5 or ax * 2)
   172 00000118 11CA                                adc     dx, cx      ; fat16 offset could overflow - 0FFFFh * 2
   173                                  
   174                                  ; ------------- Get next cluster record from FAT ------------------------------
   175                                              ; cx = 0
   176                                              ; dx:ax - byte offset of the cluster in FAT
   177                                  
   178 0000011A BB007E                              mov     bx, FAT_CACHE_ADDR
   179 0000011D F776[0B]                            div     word bp [byte sector_size]
   180 00000120 8D7701                              lea     si, [bx + 1]
   181 00000123 01D6                                add     si, dx      ; dx - offset in sector
   182 00000125 99                                  cwd
   183 00000126 0346FC                              add     ax, word bp [byte fat_start]
   184 00000129 1356FE                              adc     dx, word bp [byte fat_start + 2]
   185                                  
   186 0000012C 68[3F7D]                            push    OUR_ADDRESS + take_fat_record
   187 0000012F 3B46FA                              cmp     ax, bp [byte cached_fat_sector]
   188 00000132 8946FA                              mov     bp [byte cached_fat_sector], ax
   189 00000135 7565                                jnz     short read_one_sector
   190                                  
   191                                  ; -------------------------------------------------
   192                                  
   193                                  adjust_to_next:
   194 00000137 40                                  inc     ax		; increase read	address
   195 00000138 7501                                jnz     short no_addr_overflow
   196 0000013A 42                                  inc     dx
   197                                  no_addr_overflow:
   198 0000013B 035E[0B]                            add     bx, word bp [byte sector_size]
   199 0000013E C3                                  retn
   200                                  
   201                                  take_fat_record:
   202                                              ; bx -> pointer to the next sector
   203                                              ; si -> pointer to the record + 1
   204                                              ; on FAT12 it is possible that record is split between two sectors
   205 0000013F 39DE                                cmp     si, bx
   206 00000141 7203                                jb      short no_fat_split
   207 00000143 E85600                              call    read_one_sector
   208                                  no_fat_split:
   209 00000146 4E                                  dec     si
   210 00000147 AD                                  lodsw               ; read next cluster word
   211                                  
   212 00000148 9D                                  popf
   213 00000149 7303                                jnc     short lower_half_byte
   214 0000014B C1E804                              shr     ax, 4       ; on fat12 shift 0XXX0h -> 00XXXh
   215                                  lower_half_byte:
   216 0000014E B3FF                                mov     bl, 0FFh
   217 00000150 8A7E[02]                            mov     bh, bp [byte cluster_mask]  ; bx 0FFFFh on FAT16, 0FFFh on FAT12
   218 00000153 21D8                                and     ax, bx
   219                                              ; ax - next cluster
   220 00000155 B3F8                                mov     bl, 0F8h    ; 0FFF8h or 0FF8h
   221 00000157 39D8                                cmp     ax, bx      ; is last cluster?
   222 00000159 7291                                jb      short read_loader_cluster
   223                                  
   224                                  ; ------------- File is loaded, execute it --------------------------------------------
   225 0000015B 8A56[24]                            mov     dl, bp[byte drive]
   226 0000015E CB                                  retf            ; jump to SEG_ADDRESS_TO_LOAD:0 - start of the	loader
   227                                  
   228                                  ; ---------------------------------------------------------------------------
   229                                  
   230                                  print_replace_disk:
   231 0000015F B0[EA]                              mov     al, replace_disk_msg - 100h ; "Replace the disk"
   232                                  
   233                                  message_exit:
   234 00000161 B47D                                mov     ah, 7Dh			; our address + 100h high byte
   235 00000163 96                                  xchg    ax, si
   236                                  
   237                                  print_char:
   238 00000164 AC                                  lodsb
   239 00000165 84C0                                test    al, al
   240 00000167 78F6                                js      short print_replace_disk
   241 00000169 7415                                jz      short wait_exit
   242 0000016B B40E                                mov     ah, 0Eh		; video	- display char and move	cursor;	al-char
   243 0000016D BB0700                              mov     bx, 7		; color	7, page	0
   244 00000170 CD10                                int     10h
   245 00000172 EBF0                                jmp     short print_char
   246                                  ; --------------------------------------------------------------------------------
   247                                  
   248 00000174 0D0A4469736B206572-     disk_error_msg      db  0Dh, 0Ah, 'Disk error'
   248 0000017D 726F72             
   249                                  ; next byte is "cbw" command (98h) which is > 80h
   250                                  ; ---------------------------------------------------------------------------
   251                                  wait_exit:
   252                                              ; al is always 0 here
   253 00000180 98                                  cbw
   254 00000181 CD16                                int     16h     ; ah = 0, wait for a key press
   255 00000183 CD19                                int     19h     ; reboot the computer
   256                                  
   257                                  ; --------------------------------------------------------------------------
   258 00000185 4D697373696E6720        missing_file_msg    db 'Missing '
   259                                  
   260 0000018D 4F534C4F4144455220-     loader_file_name    db 'OSLOADER', 3 dup(' ')
   260 00000196 2020               
   261                                  ; next byte is "mov al" command (B0) which is > 80h
   262                                  ; ---------------------------------------------------------------------------
   263                                  
   264                                  disk_error_exit:
   265 00000198 B0[74]                              mov     al, disk_error_msg - 100h
   266 0000019A EBC5                                jmp     short message_exit
   267                                  
   268                                  ; -------------- Read one sector ------------------------------------
   269                                              ; expects cx to be 0
   270                                              ; rest parameters are the same as for read_sectors
   271                                  read_one_sector:
   272                                  
   273 0000019C 41                                  inc     cx
   274                                  ; -------------- Read sectors procedure ------------------------------------
   275                                              ; es:bx	-> buffer
   276                                              ; dx:ax	- address of the sector
   277                                              ; cx - number of sectors to read
   278                                          ; on return:
   279                                              ; cx = 0
   280                                              ; dx:ax - next sector address
   281                                              ; es:bx -> adjusted to point to next address
   282                                              ; other registers are unchanged
   283                                  read_sectors:
   284                                  
   285 0000019D 60                                  pusha           ; save registers
   286                                  
   287                                  ; DAP block end
   288 0000019E 1E                                  push    ds      ; 0
   289 0000019F 1E                                  push    ds      ; 0
   290 000001A0 52                                  push    dx
   291 000001A1 50                                  push    ax		; 8 byte	absolute number	of sector
   292 000001A2 06                                  push    es
   293 000001A3 53                                  push    bx		; address to read to
   294 000001A4 51                                  push    cx		; num sectors
   295 000001A5 6A10                                push    10h		; DAP block size
   296                                  ; DAP block start
   297                                  
   298 000001A7 53                                  push    bx
   299 000001A8 51                                  push    cx
   300                                  
   301                                  ; convert abs address to cylinders, heads and tracks for ah=2 bios API
   302 000001A9 91                                  xchg    ax, cx		; save lower address to	cx
   303 000001AA 8B5E[18]                            mov     bx, word bp[byte sec_per_track]
   304 000001AD 92                                  xchg    ax, dx		; higher -> ax
   305 000001AE 99                                  cwd
   306                                              ; dx:ax = 0:high address
   307 000001AF F7F3                                div     bx		    ; higher address / sectors per track
   308                                              ; dx = high address % sec_per_track
   309 000001B1 91                                  xchg    ax, cx		; cx = high address / sec_per_track
   310                                              ; ax = low address
   311 000001B2 F7F3                                div     bx		    ; lower	address	/ sectors per track
   312                                  
   313 000001B4 29D3                                sub     bx, dx      ; bx - sectors remaining on the track
   314                                  
   315 000001B6 87CA                                xchg    cx, dx		; cx - remainder, dx - higher result
   316                                              ; dx:ax = abs address / sec_per_track
   317                                              ; cx = abs address % sec_per_track
   318 000001B8 F776[1A]                            div     word bp [byte num_heads]
   319                                              ; ax - cylinder, cx - sector, dx - head
   320 000001BB 88D6                                mov     dh, dl		; dh - head (remainder of division)
   321                                  
   322 000001BD 86C4                                xchg    al, ah      ; conver cylinder into bios format
   323 000001BF C0E006                              shl     al, 6       ; bits 0-7 go to CH, 8-9 to bits 6-7 of CL
   324 000001C2 41                                  inc     cx          ; inc sector number because it starts with 1
   325 000001C3 09C1                                or      cx, ax
   326                                  
   327                                  
   328 000001C5 58                                  pop     ax
   329                                              ; ax - requested number
   330                                              ; bx - allowed number to read for ah=02
   331 000001C6 39D8                                cmp     ax, bx
   332                                  to_be_changed:
   333 000001C8 B402                                mov     ah, 02h             ; would be replaced with "mov ah, 42h"
   334 000001CA 7602                                jbe     short fit_or_ext    ; would be replaced with "jmp short fit_or_ext"
   335 000001CC 88D8                                mov     al, bl
   336                                  fit_or_ext:
   337 000001CE 5B                                  pop     bx
   338 000001CF 8846[25]                            mov     byte bp [byte actually_read], al
   339                                  
   340 000001D2 89E6                                mov     si, sp		; pointer to DAP packet	in stack
   341 000001D4 8A56[24]                            mov     dl, bp[byte drive]
   342                                  
   343                                      		; DISK - READ SECTORS INTO MEMORY
   344                                              ; AL = number of sectors to read, CH = track, CL = sector
   345                                              ; DH = head, DL	= drive, ES:BX -> buffer to fill
   346                                              ; Return: CF set on error, AH =	status,	AL = number of sectors read
   347 000001D7 CD13                                int     13h
   348                                  
   349 000001D9 61                                  popa    ; release DAP block from stack (same as add sp, 10h)
   350                                  
   351 000001DA 61                                  popa    ; restore all registers
   352 000001DB 72BB                                jc      short disk_error_exit
   353                                  
   354                                              ; cx - number of sectors requested
   355                                  increase_values:
   356 000001DD E857FF                              call    adjust_to_next
   357 000001E0 FE4E[25]                            dec     byte bp [byte actually_read]
   358 000001E3 E0F8                                loopnz    increase_values
   359                                  
   360 000001E5 E302                                jcxz    read_done
   361 000001E7 EBB4                                jmp     short read_sectors
   362                                  read_done:
   363 000001E9 C3                                  retn
   364                                  ; ----------------------------------------------------------------------------
   365                                  
   366 000001EA 0D0A5265706C616365-     replace_disk_msg	db 0Dh,0Ah,'Replace the disk',0
   366 000001F3 20746865206469736B-
   366 000001FC 00                 
   367 000001FD 55AA                            db 55h,	0AAh
