     1                                  CPU 286
     2                                  BITS 16
     3                                  
     4                                  segment	'code'
     5                                  
     6                                  OUR_ADDRESS			equ		7C00h
     7                                  SEG_ADDRESS_TO_LOAD	equ		2000h
     8                                  ROOT_LOAD_ADDR		equ		8600h
     9                                  
    10                                  var_data_start		equ	-0Ah
    11                                  var_last_fat_sector	equ	-6
    12                                  var_reserved		equ	-4
    13                                  
    14 00000000 EB3C                    		jmp	short actual_start
    15                                  ; -------------------------------------------------------------------------
    16 00000002 90                      			db 90h			; nop -	not used
    17                                  
    18                                  ; --------------- Bios Parameters Block ------------------------------------
    19 00000003 6162636465666768        os_name				db 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'
    20 0000000B 0002                    sector_size			dw 200h
    21 0000000D 01                      sec_per_cluster		db 1
    22 0000000E 0100                    reserved_sectors	dw 1
    23 00000010 02                      num_of_fats			db 2
    24 00000011 E000                    root_file_entries	dw 0E0h
    25 00000013 400B                    total_sect_low		dw 0B40h
    26 00000015 F0                      media_type			db 0F0h
    27 00000016 0900                    fat_size			dw 9
    28 00000018 1200                    sec_per_track		dw 12h
    29 0000001A 0200                    num_heads			dw 2
    30 0000001C 00000000                hidden_sectors		dd 0
    31 00000020 00000000                total_sect_large	dd 0
    32 00000024 00                      drive				db 0
    33 00000025 00                      not_used			db 0
    34 00000026 29                      nt_signature		db 29h
    35 00000027 78563412                volume_serial		dd 12345678h
    36 0000002B 202020202020202020-     disk_label			db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '
    36 00000034 2020               
    37 00000036 4641543132202020        fs_name				db 'F', 'A', 'T', '1', '2', ' ', ' ', ' '
    38                                  
    39                                  ; ------------------------------------------------------------------------
    40                                  
    41                                  actual_start:
    42 0000003E 31C9                    			xor	cx, cx
    43                                  
    44 00000040 8ED1                    			mov		ss, cx
    45 00000042 BC007C                  			mov		sp, OUR_ADDRESS
    46 00000045 89E5                    			mov		bp, sp
    47 00000047 8EC1                    			mov		es, cx
    48 00000049 8ED9                    			mov		ds, cx
    49                                  
    50 0000004B B441                    			mov		ah, 41h				; DISK - check ext read	support
    51 0000004D BBAA55                  			mov		bx, 55AAh			; signature
    52 00000050 8856[24]                			mov		bp[byte drive], dl	; rely on drive number sent in dl
    53 00000053 CD13                    			int		13h
    54 00000055 720A                    			jc		short no_ext_bios
    55 00000057 80E101                  			and		cl, 1
    56 0000005A 7405                    			jz		short no_ext_bios
    57 0000005C C606[9E7D]42            			mov		byte [OUR_ADDRESS + bios_read_command + 2], 42h
    58                                  
    59                                  no_ext_bios:
    60                                  ; calculate data start secotor
    61 00000061 31C9                    			xor		cx, cx
    62 00000063 8A46[10]                			mov		al, byte bp[byte num_of_fats]
    63 00000066 98                      			cbw
    64 00000067 FC                      			cld
    65 00000068 F766[16]                			mul		word bp[byte fat_size]		; dx:ax - fats size in sectors
    66 0000006B 93                      			xchg	ax, bx
    67 0000006C 87D6                    			xchg	dx, si						; si:bx	-> fat size in sectors
    68 0000006E 8B46[0E]                			mov		ax, word bp[byte reserved_sectors]
    69 00000071 99                      			cwd
    70 00000072 0346[1C]                			add		ax, word bp[byte hidden_sectors]
    71 00000075 1356[1E]                			adc		dx, word bp[byte hidden_sectors+2]
    72 00000078 52                      			push	dx		; put into var_reserved
    73 00000079 50                      			push	ax
    74 0000007A 01D8                    			add		ax, bx		; + fat size
    75 0000007C 11F2                    			adc		dx, si
    76 0000007E 8B76[11]                			mov		si, word bp[byte root_file_entries]
    77 00000081 50                      			push	ax		; init var_last_fat_sector with	root start sector (invalid)
    78 00000082 52                      			push	dx		; put root start (dx:ax) into var_datastart
    79 00000083 50                      			push	ax
    80 00000084 60                      			pusha
    81 00000085 96                      			xchg	ax, si
    82 00000086 99                      			cwd
    83 00000087 C1E005                  			shl		ax, 5	; multiply by file entry size (32)
    84 0000008A 8B5E[0B]                			mov		bx, word bp[byte sector_size]
    85 0000008D 01D8                    			add		ax, bx
    86 0000008F 48                      			dec		ax
    87 00000090 F7F3                    			div		bx		; calculate number of sectors needed for root folder (x + sector_size - 1) / sector size
    88 00000092 0146F6                  			add		word bp[byte var_data_start], ax
    89 00000095 114EF8                  			adc		word bp[byte var_data_start + 2],	cx
    90                                  
    91                                  ; calculate total number	of data	clusters
    92 00000098 8B46[13]                			mov		ax, word bp[byte total_sect_low]
    93 0000009B 0B46[20]                			or		ax, word bp[byte total_sect_large]
    94 0000009E 8B56[22]                			mov		dx, word bp[byte total_sect_large + 2]
    95 000000A1 2B46F6                  			sub		ax, word bp[byte var_data_start]
    96 000000A4 1B56F8                  			sbb		dx, word bp[byte var_data_start + 2]
    97 000000A7 0346[1C]                			add		ax, word bp[byte hidden_sectors]
    98 000000AA 1356[1E]                			adc		dx, word bp[byte hidden_sectors + 2]
    99 000000AD 8A4E[0D]                			mov		cl, byte bp[byte sec_per_cluster]
   100 000000B0 F7F1                    			div		cx		; get number of	clusters
   101                                  
   102                                  ; fat type is defined by number of clusters
   103 000000B2 3DF50F                  			cmp		ax, 0FF5h
   104 000000B5 7205                    			jb		short its_fat12
   105 000000B7 8006[087D]19            			add		byte [fat_type_jump	+ 1 + OUR_ADDRESS], fat16_continue - fat12_continue
   106                                  
   107                                  its_fat12:
   108 000000BC 61                      			popa		; si - number of root entries
   109                                  						; dx:ax	- root start sector
   110                                  						; cx - 0
   111                                  
   112                                  read_root:
   113 000000BD BB0086                  			mov		bx, ROOT_LOAD_ADDR
   114 000000C0 89DF                    			mov		di, bx
   115 000000C2 E8B000                  			call	read_one_sector
   116                                  
   117                                  next_file:
   118 000000C5 380D                    			cmp		[di], cl
   119 000000C7 7469                    			je		short file_not_found
   120 000000C9 60                      			pusha
   121 000000CA B10B                    			mov		cl, 11
   122 000000CC BE[667D]                			mov		si, loader_file_name + OUR_ADDRESS
   123 000000CF F3A6                    			repe	 cmpsb
   124 000000D1 61                      			popa
   125 000000D2 740C                    			je		short loader_found
   126 000000D4 4E                      			dec		si
   127 000000D5 745B                    			jz		short file_not_found
   128 000000D7 83C720                  			add		di, 20h
   129 000000DA 39DF                    			cmp		di, bx
   130 000000DC 72E7                    			jb		short next_file
   131 000000DE EBDD                    			jmp		short read_root
   132                                  ; -------------------------------------------------------------------
   133                                  
   134                                  loader_found:
   135 000000E0 8B451A                  			mov		ax, [di+1Ah]	; fist cluster start in	file record
   136 000000E3 BF0020                  			mov		di, SEG_ADDRESS_TO_LOAD	; start	address	(segment) to load file to
   137 000000E6 57                      			push	di
   138 000000E7 51                      			push	cx
   139                                  
   140                                  read_loader_cluster:
   141 000000E8 50                      			push	ax
   142 000000E9 48                      			dec		ax
   143 000000EA 48                      			dec		ax
   144 000000EB 8A4E[0D]                			mov		cl, byte bp[byte sec_per_cluster]
   145 000000EE F7E1                    			mul		cx
   146 000000F0 0346F6                  			add		ax, word bp[byte var_data_start]
   147 000000F3 1356F8                  			adc		dx, word bp[byte var_data_start + 2]
   148 000000F6 06                      			push	es
   149 000000F7 8EC7                    			mov		es, di
   150 000000F9 31DB                    			xor		bx, bx
   151 000000FB E87800                  			call	read_sectors
   152 000000FE 07                      			pop		es
   153 000000FF C1EB04                  			shr		bx, 4
   154 00000102 01DF                    			add		di, bx
   155 00000104 58                      			pop		ax
   156 00000105 31D2                    			xor		dx, dx
   157                                  
   158                                  fat_type_jump:
   159 00000107 EB00                    			jmp		short fat12_continue
   160                                  
   161                                  fat12_continue:
   162 00000109 89C3                    			mov		bx, ax
   163 0000010B D1EB                    			shr		bx, 1
   164 0000010D 7308                    			jnc		short lower_half_byte
   165 0000010F E8A200                  			call	next_cluster_fat12
   166 00000112 C1E804                  			shr		ax, 4
   167 00000115 EB06                    			jmp		short check_last_fat12
   168                                  ; ------------------------------------------------------------------------
   169                                  
   170                                  lower_half_byte:
   171 00000117 E89A00                  			call	next_cluster_fat12
   172 0000011A 25FF0F                  			and		ax, 0FFFh
   173                                  
   174                                  check_last_fat12:
   175 0000011D 3DF80F                  			cmp		ax, 0FF8h
   176 00000120 EB0A                    			jmp		short is_last_cluster
   177                                  ; ---------------------------------------------------------------------------
   178                                  
   179                                  fat16_continue:
   180 00000122 01C0                    			add		ax, ax
   181 00000124 11CA                    			adc		dx, cx
   182 00000126 E88D00                  			call	next_cluster_fat16
   183 00000129 83F8F8                  			cmp		ax, 0FFF8h
   184                                  
   185                                  is_last_cluster:
   186 0000012C 72BA                    			jb		short read_loader_cluster
   187 0000012E 8A56[24]                			mov		dl, bp[byte drive]
   188 00000131 CB                      			retf			; jump to 2000:0 - start of the	loader
   189                                  ; -------------------------------------------------------------------------------
   190                                  
   191                                  file_not_found:
   192 00000132 B0[5C]                  			mov		al, missing_file_msg - 100h
   193                                  
   194                                  message_exit:
   195 00000134 B47D                    			mov		ah, 7Dh			; our address + 100h high byte
   196 00000136 96                      			xchg	ax, si
   197                                  
   198                                  print_char:
   199 00000137 AC                      			lodsb
   200 00000138 98                      			cbw
   201 00000139 40                      			inc		ax
   202 0000013A 780C                    			js		short print_replace_disk
   203 0000013C 48                      			dec		ax
   204 0000013D 7419                    			jz		short wait_exit
   205 0000013F B40E                    			mov		ah, 0Eh		; video	- display char and move	cursor;	al-char
   206 00000141 BB0700                  			mov		bx, 7		; color	7, page	0
   207 00000144 CD10                    			int		10h
   208 00000146 EBEF                    			jmp		short print_char
   209                                  ; --------------------------------------------------------------------------------
   210                                  
   211                                  print_replace_disk:
   212 00000148 B0[E3]                  			mov		al, replace_disk_msg - 100h ; "\r\nReplace the disk"
   213 0000014A EBE8                    			jmp		short message_exit
   214                                  ; ---------------------------------------------------------------------------
   215 0000014C 0D0A4469736B206572-     disk_error_msg		db 0Dh,	0Ah, 'Disk error'
   215 00000155 726F72             
   216                                  ; ---------------------------------------------------------------------------
   217                                  
   218                                  wait_exit:
   219 00000158 CD16                    			int	16h		; wait for a key press
   220 0000015A CD19                    			int	19h		; reboot the computer
   221                                  
   222                                  ; --------------------------------------------------------------------------
   223 0000015C 0D0A4D697373696E67-     missing_file_msg	 db 0Dh, 0Ah, 'Missing '
   223 00000165 20                 
   224                                  
   225 00000166 4E544C445220202020-     loader_file_name	 db 'NTLDR', 6 dup(' ')
   225 0000016F 2020               
   226                                  
   227                                  ; ---------------------------------------------------------------------------
   228                                  
   229                                  disk_error_exit:
   230 00000171 B0[4C]                  			mov		al, disk_error_msg - 100h
   231 00000173 EBBF                    			jmp		short message_exit
   232                                  
   233                                  ; -------------- Read sectors procedure ------------------------------------
   234                                  			; es:bx	-> buffer
   235                                  			; dx:ax	- address of the sector
   236                                  			; cx - number of sectors to read
   237                                  
   238                                  read_one_sector:
   239                                  
   240 00000175 41                      			inc		cx
   241                                  
   242                                  read_sectors:
   243                                  
   244 00000176 60                      			pusha
   245                                  
   246                                  ; DAP block end
   247 00000177 1E                      			push	ds		; 0
   248 00000178 1E                      			push	ds
   249 00000179 52                      			push	dx
   250 0000017A 50                      			push	ax		; 8byte	absolute number	of sector
   251 0000017B 06                      			push	es
   252 0000017C 53                      			push	bx		; address to read to
   253 0000017D 6A01                    			push	1		; num sectors
   254 0000017F 6A10                    			push	10h		; DAP block size
   255                                  ; DAP block start
   256                                  
   257                                  ; convert abs address to cylinders, heads and tracks for ah=2 bios API
   258 00000181 91                      			xchg	ax, cx		; save lower address to	cx
   259 00000182 8B46[18]                			mov		ax, word bp[byte sec_per_track]
   260 00000185 96                      			xchg	ax, si
   261 00000186 92                      			xchg	ax, dx		; higher -> ax
   262 00000187 99                      			cwd
   263 00000188 F7F6                    			div		si		; higher address / sectors per track
   264 0000018A 91                      			xchg	ax, cx		; store	higher result in cx
   265 0000018B F7F6                    			div		si		; lower	address	/ sectors per track
   266 0000018D 42                      			inc		dx
   267 0000018E 87CA                    			xchg	cx, dx		; cx - remainder + 1, dx - higher result
   268 00000190 F776[1A]                			div		word bp[byte num_heads]
   269 00000193 88D6                    			mov		dh, dl		; dh - head (remainder of division)
   270 00000195 88C5                    			mov		ch, al
   271 00000197 C0CC02                  			ror		ah, 2
   272 0000019A 08E1                    			or		cl, ah
   273                                  
   274                                  bios_read_command:
   275 0000019C B80102                  			mov		ax, 201h
   276 0000019F 89E6                    			mov		si, sp		; pointer to DAP packet	in stack
   277 000001A1 8A56[24]                			mov		dl, bp[byte drive]
   278 000001A4 CD13                    			int		13h		; DISK - READ SECTORS INTO MEMORY
   279                                  					; AL = number of sectors to read, CH = track, CL = sector
   280                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
   281                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
   282 000001A6 61                      			popa
   283 000001A7 61                      			popa
   284 000001A8 72C7                    			jc		short disk_error_exit
   285 000001AA 40                      			inc		ax		; increase read	address
   286 000001AB 7501                    			jnz		short no_addr_overflow
   287 000001AD 42                      			inc		dx
   288                                  
   289                                  no_addr_overflow:
   290 000001AE 035E[0B]                			add		bx, word bp[byte sector_size]
   291 000001B1 E2C3                    			loop	read_sectors
   292 000001B3 C3                      			retn
   293                                  ; ----------------------------------------------------------------------------
   294                                  
   295                                  next_cluster_fat12:
   296                                  
   297 000001B4 01D8                    			add		ax, bx		; ax = ax * 1.5
   298                                  
   299                                  next_cluster_fat16:
   300 000001B6 BB007E                  			mov		bx, OUR_ADDRESS + 200h
   301 000001B9 F776[0B]                			div		word bp[byte sector_size]
   302 000001BC 8D7701                  			lea		si, [bx+1]
   303 000001BF 01D6                    			add		si, dx
   304 000001C1 99                      			cwd
   305 000001C2 0346FC                  			add		ax, word bp[byte var_reserved]
   306 000001C5 1356FE                  			adc		dx, word bp[byte var_reserved + 2]
   307 000001C8 3B46FA                  			cmp		ax, bp[byte var_last_fat_sector]
   308 000001CB 740D                    			jz		short already_read
   309 000001CD 8946FA                  			mov		bp[byte var_last_fat_sector], ax
   310                                  
   311                                  read_one_more:
   312 000001D0 E8A2FF                  			call	read_one_sector
   313                                  
   314                                  take_fat_record:
   315 000001D3 39DE                    			cmp		si, bx
   316 000001D5 73F9                    			jnb		short read_one_more
   317 000001D7 4E                      			dec		si
   318 000001D8 AD                      			lodsw			; read next cluster word
   319 000001D9 C3                      			retn
   320                                  ; ----------------------------------------------------------------------------
   321                                  
   322                                  already_read:
   323 000001DA 035E[0B]                			add		bx, word bp[byte sector_size]
   324 000001DD 40                      			inc		ax
   325 000001DE 75F3                    			jnz		short take_fat_record
   326 000001E0 42                      			inc		dx
   327 000001E1 EBF0                    			jmp		short take_fat_record
   328                                  ; ---------------------------------------------------------------------------
   329 000001E3 0D0A5265706C616365-     replace_disk_msg	db 0Dh,0Ah,'Replace the disk',0
   329 000001EC 20746865206469736B-
   329 000001F5 00                 
   330 000001F6 44524F4F50593100        		db 'DROOPY1', 0
   331 000001FE 55AA                    		db 55h,	0AAh
